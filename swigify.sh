#!/bin/bash

#script to generate python module from c++ file for modetracking

#copy c++ sources files and built objects to directory
#note that this does -not- build a fresh copy of modetrack.o
#that needs to be done externally (for now...)
cp ~/Qt-Projects/modetrack/modetrack.cpp ./
cp ~/Qt-Projects/modetrack/modetrack.h ./
cp ~/Qt-Projects/build-modetrack-Desktop_Qt_5_5_1_GCC_64bit-Release/modetrack.o ./

#direct SWIG to the SWIG interface file (.i)
swig -c++ -python -o modetrack_wrap.cpp modetrack_wrapper.i

#note that the include path MUST be for python3.4
#the c++11 file is to prevent errors of the form, 'x... is not a member of std::'
gcc -fPIC -std=c++11 -c modetrack_wrap.cpp -o modetrack_wrap.o -I/usr/include/python3.4 -std=c++11

#point g++ at the .o file generated in the previous step and the .o file
#generated by compiling the program seperately
#since the application is multi-threaded using OpenMP we need to pass
#the openmp flag and link against the GOMP (GCC OpenMP) library.
g++ -fopenmp -lgomp -lrt -shared modetrack_wrap.o modetrack.o -o _modetrack.so

#Module will be named 'modetrack' and constructor is called with ModeTrack(std::str)
#Note that this must be done using python3.4
